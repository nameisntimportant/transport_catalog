set(CMAKE_MIN_VERSION 3.5)
cmake_minimum_required(VERSION ${CMAKE_MIN_VERSION})

project(transport_catalog LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SRC_DIRECTORY ${CMAKE_SOURCE_DIR}/src)
set(PROTO_DIRECTORY ${SRC_DIRECTORY}/proto)
set(UTILS_DIRECTORY ${SRC_DIRECTORY}/utils)

include_directories(${UTILS_DIRECTORY})

set(PROJECT_SRCS
    ${SRC_DIRECTORY}/main.cpp
    ${SRC_DIRECTORY}/json.cpp
    ${SRC_DIRECTORY}/baseRequests.cpp
    ${SRC_DIRECTORY}/transportCatalog.cpp
    ${SRC_DIRECTORY}/sphere.cpp
    ${SRC_DIRECTORY}/statRequests.cpp
    ${SRC_DIRECTORY}/transportRouter.cpp
    ${UTILS_DIRECTORY}/utils.cpp)

set(PROJECT_HDRS
    ${SRC_DIRECTORY}/json.h
    ${SRC_DIRECTORY}/baseRequests.h
    ${SRC_DIRECTORY}/transportCatalog.h
    ${SRC_DIRECTORY}/sphere.h
    ${SRC_DIRECTORY}/statRequests.h
    ${SRC_DIRECTORY}/graph.h
    ${SRC_DIRECTORY}/router.h
    ${SRC_DIRECTORY}/routeDistancesDict.h
    ${SRC_DIRECTORY}/transportRouter.h
    ${UTILS_DIRECTORY}/utils.h
    ${UTILS_DIRECTORY}/log.h
    ${UTILS_DIRECTORY}/makeVisitor.h
    ${UTILS_DIRECTORY}/profiler.h)

find_package(Protobuf REQUIRED)
include_directories(${Protobuf_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_BINARY_DIR}) # to include autogenerated *.pb.h files
set(PROJECT_PROTOS ${PROTO_DIRECTORY}/transport_catalog.proto)
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROJECT_PROTOS})

add_executable(${PROJECT_NAME} ${PROJECT_SRCS} ${PROJECT_HDRS} ${PROTO_SRCS} ${PROTO_HDRS})

target_link_libraries(${PROJECT_NAME} ${Protobuf_LIBRARIES})
set (TESTS_PROJECT ${PROJECT_NAME}_tests)
set (TESTS_DIRECTORY ${SRC_DIRECTORY}/tests)

set (TESTS_PROJECT_SRCS
    ${TESTS_DIRECTORY}/main.cpp
    ${TESTS_DIRECTORY}/jsonTestSuite.cpp
    ${TESTS_DIRECTORY}/baseRequestsTestSuite.cpp
    ${TESTS_DIRECTORY}/sphereTestSuite.cpp
    ${TESTS_DIRECTORY}/graphTestSuite.cpp
    ${TESTS_DIRECTORY}/routerTestSuite.cpp
    ${TESTS_DIRECTORY}/transportRouterTestSuite.cpp)

set (TESTS_PROJECT_HDRS
    ${TESTS_DIRECTORY}/jsonTestSuite.h
    ${TESTS_DIRECTORY}/baseRequestsTestSuite.h
    ${TESTS_DIRECTORY}/sphereTestSuite.h
    ${TESTS_DIRECTORY}/graphTestSuite.h
    ${TESTS_DIRECTORY}/routerTestSuite.h
    ${TESTS_DIRECTORY}/transportRouterTestSuite.h
    ${TESTS_DIRECTORY}/testRunner.h)

set (UNDER_TEST_SRCS
    ${SRC_DIRECTORY}/json.cpp
    ${SRC_DIRECTORY}/baseRequests.cpp
    ${SRC_DIRECTORY}/sphere.cpp
    ${SRC_DIRECTORY}/transportRouter.cpp
    ${UTILS_DIRECTORY}/utils.cpp)

set (UNDER_TEST_HDRS
    ${SRC_DIRECTORY}/json.h
    ${SRC_DIRECTORY}/baseRequests.h
    ${SRC_DIRECTORY}/sphere.h
    ${SRC_DIRECTORY}/graph.h
    ${SRC_DIRECTORY}/router.h
    ${SRC_DIRECTORY}/routeDistancesDict.h
    ${SRC_DIRECTORY}/transportRouter.h)

add_executable(${TESTS_PROJECT} ${TESTS_PROJECT_SRCS} ${TESTS_PROJECT_HDRS}
               ${UNDER_TEST_SRCS} ${UNDER_TEST_HDRS})

target_include_directories(${TESTS_PROJECT} PRIVATE ${SRC_DIRECTORY})

option(RUN_UNIT_TESTS_AUTOMATICALLY "Automatically run unit tests after building transport catalog" OFF)
if(RUN_UNIT_TESTS_AUTOMATICALLY)
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${TESTS_PROJECT})
endif()

set (INTEGRATION_TEST_PATH ${CMAKE_SOURCE_DIR}/integrationTest)
set (INTEGRATION_TEST_SCRIPT ${INTEGRATION_TEST_PATH}/integrationTest.py)
set (PATH_TO_BINARY_UNDER_TEST ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME})

option(RUN_INTEGRATION_TESTS_AUTOMATICALLY "Automatically run integration tests after building transport catalog" OFF)
if(RUN_INTEGRATION_TESTS_AUTOMATICALLY)
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                       COMMAND ${INTEGRATION_TEST_SCRIPT} ${PATH_TO_BINARY_UNDER_TEST}
                       WORKING_DIRECTORY ${INTEGRATION_TEST_PATH})
endif()
